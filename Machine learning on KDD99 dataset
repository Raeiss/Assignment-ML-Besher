{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Untitled6.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyO914xSDB8TMvTHwgxyl3GW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Raeiss/Assignment-ML-Besher/blob/main/Machine%20learning%20on%20KDD99%20dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ISy7qbiwrwpd"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import csv"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"../content/kddcup99_csv.csv\")"
      ],
      "metadata": {
        "id": "FWloiUYzujOJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "maSya8L0r3p6",
        "outputId": "f6324dea-b414-4532-baf1-104b89dc5533"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(265964, 42)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CdviOzgXxe09",
        "outputId": "1b4f193e-22cd-4723-9e5e-2adcd68cff2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['duration', 'protocol_type', 'service', 'flag', 'src_bytes',\n",
              "       'dst_bytes', 'land', 'wrong_fragment', 'urgent', 'hot',\n",
              "       'num_failed_logins', 'logged_in', 'lnum_compromised', 'lroot_shell',\n",
              "       'lsu_attempted', 'lnum_root', 'lnum_file_creations', 'lnum_shells',\n",
              "       'lnum_access_files', 'lnum_outbound_cmds', 'is_host_login',\n",
              "       'is_guest_login', 'count', 'srv_count', 'serror_rate',\n",
              "       'srv_serror_rate', 'rerror_rate', 'srv_rerror_rate', 'same_srv_rate',\n",
              "       'diff_srv_rate', 'srv_diff_host_rate', 'dst_host_count',\n",
              "       'dst_host_srv_count', 'dst_host_same_srv_rate',\n",
              "       'dst_host_diff_srv_rate', 'dst_host_same_src_port_rate',\n",
              "       'dst_host_srv_diff_host_rate', 'dst_host_serror_rate',\n",
              "       'dst_host_srv_serror_rate', 'dst_host_rerror_rate',\n",
              "       'dst_host_srv_rerror_rate', 'label'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RU3LhfjXxjOr",
        "outputId": "bf72af37-9be6-408e-9328-33ec31c014d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 265964 entries, 0 to 265963\n",
            "Data columns (total 42 columns):\n",
            " #   Column                       Non-Null Count   Dtype  \n",
            "---  ------                       --------------   -----  \n",
            " 0   duration                     265964 non-null  int64  \n",
            " 1   protocol_type                265964 non-null  object \n",
            " 2   service                      265964 non-null  object \n",
            " 3   flag                         265964 non-null  object \n",
            " 4   src_bytes                    265964 non-null  int64  \n",
            " 5   dst_bytes                    265964 non-null  int64  \n",
            " 6   land                         265964 non-null  int64  \n",
            " 7   wrong_fragment               265964 non-null  int64  \n",
            " 8   urgent                       265964 non-null  int64  \n",
            " 9   hot                          265964 non-null  int64  \n",
            " 10  num_failed_logins            265964 non-null  int64  \n",
            " 11  logged_in                    265964 non-null  int64  \n",
            " 12  lnum_compromised             265964 non-null  int64  \n",
            " 13  lroot_shell                  265964 non-null  int64  \n",
            " 14  lsu_attempted                265964 non-null  int64  \n",
            " 15  lnum_root                    265964 non-null  int64  \n",
            " 16  lnum_file_creations          265964 non-null  int64  \n",
            " 17  lnum_shells                  265964 non-null  int64  \n",
            " 18  lnum_access_files            265964 non-null  int64  \n",
            " 19  lnum_outbound_cmds           265964 non-null  int64  \n",
            " 20  is_host_login                265964 non-null  int64  \n",
            " 21  is_guest_login               265964 non-null  int64  \n",
            " 22  count                        265964 non-null  int64  \n",
            " 23  srv_count                    265964 non-null  int64  \n",
            " 24  serror_rate                  265964 non-null  float64\n",
            " 25  srv_serror_rate              265964 non-null  float64\n",
            " 26  rerror_rate                  265964 non-null  float64\n",
            " 27  srv_rerror_rate              265964 non-null  float64\n",
            " 28  same_srv_rate                265964 non-null  float64\n",
            " 29  diff_srv_rate                265964 non-null  float64\n",
            " 30  srv_diff_host_rate           265964 non-null  float64\n",
            " 31  dst_host_count               265964 non-null  int64  \n",
            " 32  dst_host_srv_count           265964 non-null  int64  \n",
            " 33  dst_host_same_srv_rate       265964 non-null  float64\n",
            " 34  dst_host_diff_srv_rate       265964 non-null  float64\n",
            " 35  dst_host_same_src_port_rate  265964 non-null  float64\n",
            " 36  dst_host_srv_diff_host_rate  265964 non-null  float64\n",
            " 37  dst_host_serror_rate         265964 non-null  float64\n",
            " 38  dst_host_srv_serror_rate     265964 non-null  float64\n",
            " 39  dst_host_rerror_rate         265964 non-null  float64\n",
            " 40  dst_host_srv_rerror_rate     265964 non-null  float64\n",
            " 41  label                        265963 non-null  object \n",
            "dtypes: float64(15), int64(23), object(4)\n",
            "memory usage: 85.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "input_cols = list(df.columns)[1:-1]\n",
        "target_col = 'label'\n",
        "numeric_cols = df.select_dtypes(include=np.number).columns.tolist()[:-1]"
      ],
      "metadata": {
        "id": "67k2_65WxpX7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "scaler.fit(df[numeric_cols])\n",
        "df[numeric_cols] = scaler.transform(df[numeric_cols])"
      ],
      "metadata": {
        "id": "xSaypIXjxvjK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "\n",
        "target = df['label']\n",
        "df['label'] = le.fit_transform(target)\n",
        "df['protocol_type'] = le.fit_transform(df['protocol_type'])\n",
        "df['service'] = le.fit_transform(df['service'])\n",
        "df['flag'] = le.fit_transform(df['flag'])"
      ],
      "metadata": {
        "id": "aIt4Z3Pwx4AA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_df, test_df = train_test_split(df, test_size=0.3, random_state=42)\n",
        "print(train_df.shape)\n",
        "print(test_df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ocxWhRmyEjC",
        "outputId": "a3715546-64a1-4cdf-a861-0ca6233cb926"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(186174, 42)\n",
            "(79790, 42)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs = train_df[input_cols].copy()\n",
        "train_targets = train_df[target_col].copy()\n",
        "test_inputs = test_df[input_cols].copy()\n",
        "test_targets = test_df[target_col].copy()"
      ],
      "metadata": {
        "id": "14lohW07yhwI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.feature_selection import SelectFromModel\n",
        "sel = SelectFromModel(RandomForestClassifier(n_estimators = 5, random_state=42))\n",
        "sel.fit(train_inputs, train_targets)\n",
        "selected_feat = train_inputs.columns[(sel.get_support())]\n",
        "print(selected_feat)\n",
        "print(len(selected_feat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0qgg3LOJymw5",
        "outputId": "2cebd1cf-90a0-40a6-eac0-71bee56a1e24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['protocol_type', 'service', 'flag', 'src_bytes', 'logged_in', 'count',\n",
            "       'srv_serror_rate', 'diff_srv_rate', 'dst_host_srv_count',\n",
            "       'dst_host_same_src_port_rate', 'dst_host_srv_serror_rate'],\n",
            "      dtype='object')\n",
            "11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rf = RandomForestClassifier(n_estimators = 1000, random_state = 42)\n",
        "rf.fit(train_inputs[selected_feat], train_targets);\n",
        "preds_rf = rf.predict(test_inputs[selected_feat])\n",
        "from sklearn.metrics import accuracy_score\n",
        "score_rf = accuracy_score(test_targets, preds_rf)\n",
        "score_rf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qkb_KtaQysLz",
        "outputId": "9f48f2fe-f243-4421-b96d-8a9cafd4c0f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9982579270585287"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "knn = KNeighborsClassifier(n_neighbors=7)\n",
        "knn.fit(train_inputs[selected_feat], train_targets)\n",
        "preds_knn = knn.predict(test_inputs[selected_feat])\n",
        "score_knn = accuracy_score(test_targets, preds_knn)\n",
        "score_knn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TOvESYztzNA9",
        "outputId": "034e7943-02cf-4433-e6f6-8fe2264a7c32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9949241759619"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    }
  ]
}